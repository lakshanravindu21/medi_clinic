// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  ADMIN
  DOCTOR
}

enum AppointmentStatus {
  BOOKED
  CANCELED
  COMPLETED
  RESCHEDULED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(PATIENT)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointments Appointment[]
  patientProfile Patient?
  
  @@map("users")
}

model Patient {
  id             String   @id @default(uuid())
  userId         String   @unique
  firstName      String
  lastName       String
  phone          String
  email          String
  primaryDoctorId String?
  dob            DateTime?
  gender         String?
  bloodGroup     String?
  status         String   @default("Active")
  address1       String?
  address2       String?
  country        String?
  city           String?
  state          String?
  pincode        String?
  imageUrl       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  primaryDoctor  Doctor?  @relation(fields: [primaryDoctorId], references: [id])
  
  @@map("patients")
}

model Doctor {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  phone           String?
  specialization  String
  department      String?
  designation     String?
  description     String?
  bio             String?
  imageUrl        String?
  dob             DateTime?
  yearOfExperience Int?
  medicalLicense  String?
  languagesSpoken String?  // JSON string
  bloodGroup      String?
  gender          String?
  address1        String?
  address2        String?
  country         String?
  city            String?
  state           String?
  pincode         String?
  availability    String   @default("{}") // JSON string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  appointments    Appointment[]
  patients        Patient[]
  
  @@map("doctors")
}

model Appointment {
  id                  String            @id @default(uuid())
  patientId           String
  doctorId            String
  appointmentDateTime DateTime
  reason              String?
  symptoms            String?
  status              AppointmentStatus @default(BOOKED)
  notes               String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  patient User   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_resets")
}